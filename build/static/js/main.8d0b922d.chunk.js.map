{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","createMuiTheme","palette","primary","main","secondary","contrastThreshold","tonalOffset","typography","button","textTransform","useStyles","makeStyles","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","paper","padding","textAlign","color","text","background","radioButtons","maxHeight","minHeight","maxWidth","overflow","info","header","footer","footerLink","radioGroup","textField","width","buttonProgress","green","position","top","left","marginTop","marginLeft","formControl","marginBottom","margin","minWidth","emptyNetworkInformation","name","type","location","owner","version","url","App","React","useState","rowmaUrl","setRowmaUrl","rowma","setRowma","undefined","robotUuids","setRobotUuids","selectedRobot","setSelectedRobot","setRosrunCommands","setRoslaunchCommands","setRosnodes","setRostopics","topicMsg","setTopicMsg","selectedRostopicForPublish","setSelectedRostopicForPublish","setRobot","submitUrlButtonLoading","setSubmitUrlButtonLoading","connectButtonLoading","setConnectButtonLoading","rostopicForPublishButtonLoading","setRostopicForPublishButtonLoading","setNetworkInformation","classes","latlng","Array","handleConnectNetworkClick","a","_rowma","Rowma","baseURL","getNetworkInformation","networkInfo","data","currentConnectionList","connList","map","robot","uuid","handlePublishButtonClick","publish","JSON","parse","className","ThemeProvider","AppBar","Toolbar","Container","Typography","variant","Grid","container","item","xs","sm","md","Paper","TextField","label","onChange","event","target","value","Button","disabled","onClick","CircularProgress","size","FormControl","component","length","RadioGroup","aria-label","FormControlLabel","control","Radio","connect","catch","e","console","error","setRobotUuid","getRobotStatus","then","res","rosnodes","rosrunCommands","launchCommands","rostopics","i","sessionStorage","push","getItem","toString","log","latlng_str","msg","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8d0b922d.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport './App.css';\n\nimport { createMuiTheme, makeStyles, ThemeProvider, Theme, createStyles } from '@material-ui/core/styles';\nimport { green } from '@material-ui/core/colors';\n\nimport { VariableSizeList } from 'react-window';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Container from '@material-ui/core/Container';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport Link from '@material-ui/core/Link';\nimport TextField from '@material-ui/core/TextField';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\n\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\n\n// @ts-ignore\nimport Rowma from 'rowma_js';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#ffffff',\n    },\n    secondary: {\n      main: '#38B48B',\n    },\n    contrastThreshold: 3,\n    tonalOffset: 0.2,\n  },\n  typography: {\n    button: {\n      textTransform: 'none'\n    }\n  }\n});\n\nconst useStyles = makeStyles((theme: Theme) => (\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n      background: '#fdfdfd'\n    },\n    radioButtons: {\n      maxHeight: 300,\n      minHeight: 300,\n      maxWidth: '100%',\n      textAlign: 'center',\n      overflow: 'auto'\n    },\n    info: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n      background: '#f6f6f6'\n    },\n    header: {\n      color: theme.palette.text.primary,\n      background: '#fcfcfc'\n    },\n    footer: {\n      textAlign: 'left',\n    },\n    footerLink: {\n      color: '#38B48B',\n      marginRight: '1rem',\n    },\n    radioGroup: {\n      textAlign: 'left',\n    },\n    textField: {\n      width: '60%',\n    },\n    buttonProgress: {\n      color: green[500],\n      position: 'absolute',\n      top: '50%',\n      left: '50%',\n      marginTop: -12,\n      marginLeft: -12,\n    },\n    formControl: {\n      marginBottom: theme.spacing(3),\n      margin: theme.spacing(1),\n      minWidth: 120,\n    },\n  })\n));\n\nconst sleep = (ms: number) => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\ninterface NetworkInformationInterface {\n  name: string;\n  type: string;\n  location: string;\n  owner: string;\n  version: string;\n  url: string;\n}\n\nconst emptyNetworkInformation: NetworkInformationInterface = {\n  name: '',\n  type: '',\n  location: '',\n  owner: '',\n  version: '',\n  url: ''\n}\n\nconst App: React.FC = () => {\n  const [rowmaUrl, setRowmaUrl] = React.useState<string>(\"https://rowma.moriokalab.com\");\n  const [rowma, setRowma] = React.useState<any>(null);\n  const [robotUuids, setRobotUuids] = React.useState<Array<string> | undefined>(undefined);\n  const [selectedRobot, setSelectedRobot] = React.useState<any | null>(null);\n  const [rosrunCommands, setRosrunCommands] = React.useState<Array<string>>([]);\n  const [selectedRosrunCommand, setSelectedRosrunCommand] = React.useState<string>('');\n  const [roslaunchCommands, setRoslaunchCommands] = React.useState<Array<string>>([]);\n  const [rosnodes, setRosnodes] = React.useState<Array<string>>([]);\n  const [rostopics, setRostopics] = React.useState<Array<string>>([]);\n  const [topicMsg, setTopicMsg] = React.useState<string>('');\n  const [selectedRoslaunchCommand, setSelectedRoslaunchCommand] = React.useState<string>('');\n  const [selectedRosnode, setSelectedRosnode] = React.useState<string>('');\n  const [selectedRostopic, setSelectedRostopic] = React.useState<string>('');\n  const [selectedRostopicForPublish, setSelectedRostopicForPublish] = React.useState<string>('');\n  const [selectedRostopicForUnsubscribe, setSelectedRostopicForUnsubscribe] = React.useState<string>('');\n  const [selectedR2rRostopic, setSelectedR2rRostopic] = React.useState<string>('');\n  const [selectedDestinationRobot, setSelectedDestinationRobot] = React.useState<string>('');\n  const [robot, setRobot] = React.useState<any>({});\n  const [submitUrlButtonLoading, setSubmitUrlButtonLoading] = React.useState<boolean>(false);\n  const [connectButtonLoading, setConnectButtonLoading] = React.useState<boolean>(false);\n  const [rosrunButtonLoading, setRosrunButtonLoading] = React.useState<boolean>(false);\n  const [roslaunchButtonLoading, setRoslaunchButtonLoading] = React.useState<boolean>(false);\n  const [rosnodeButtonLoading, setRosnodeButtonLoading] = React.useState<boolean>(false);\n  const [rostopicButtonLoading, setRostopicButtonLoading] = React.useState<boolean>(false);\n  const [rostopicForPublishButtonLoading, setRostopicForPublishButtonLoading] = React.useState<boolean>(false);\n  const [rostopicForUnsubscribeButtonLoading, setRostopicForUnsubscribeButtonLoading] = React.useState<boolean>(false);\n  const [addScriptButtonLoading, setAddScriptButtonLoading] = React.useState<boolean>(false);\n\n  const [networkInformation, setNetworkInformation] = React.useState<any>(emptyNetworkInformation);\n  const [items, setItems] = React.useState<Array<string>>([]);\n  const [_roslaunchLog, setRoslaunchLog] = React.useState<Array<string>>([]);\n  const [roslaunchLogs, setRoslaunchLogs] = React.useState<Array<string>>([]);\n  const [rosrunLogs, setRosrunLogs] = React.useState<Array<string>>([]);\n  const [scriptName, setScriptName] = React.useState<string>(\"\");\n  const [script, setScript] = React.useState<string>(\"\");\n\n  const classes = useStyles();\n\n  var latlng: any[] = new Array;\n\n  const handleUrlFieldChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRowmaUrl((event.target as HTMLInputElement).value);\n  }\n\n  const handleConnectNetworkClick = async () => {\n    setSubmitUrlButtonLoading(true);\n    const _rowma = new Rowma({ baseURL: rowmaUrl });\n    setRowma(_rowma);\n\n    const networkInfo = await _rowma.getNetworkInformation()\n    setNetworkInformation({ url: rowmaUrl, ...networkInfo.data })\n\n    const connList = await _rowma.currentConnectionList()\n    setRobotUuids(connList.data.map((robot: any) => robot.uuid));\n\n    setRobot({})\n    setRosrunCommands([]);\n    setRoslaunchCommands([]);\n    setRostopics([]);\n\n    setSubmitUrlButtonLoading(false);\n  }\n\n  const handleRobotChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRobot((event.target as HTMLInputElement).value);\n  };\n\n  const handleTopicArrival = (event: any) => {\n    setItems(items => [...items, JSON.stringify(event.msg)])\n  }\n\n  const handleRoslaunchLog = (event: any) => {\n    console.log(event)\n    setRoslaunchLogs(logs => [...logs, JSON.stringify(event)])\n    // setRoslaunchLog(items => [...items, JSON.stringify(event.log)])\n  }\n\n  const handleRosrunLog = (event: any) => {\n    console.log(event)\n    setRosrunLogs(logs => [...logs, JSON.stringify(event)])\n    // setRosrunLog(items => [...items, JSON.stringify(event.log)])\n  }\n\n  const handleConnectClicked = () => {\n    setConnectButtonLoading(true);\n    rowma.connect().catch((e: any) => {\n      console.error(e)\n    })\n    rowma.setRobotUuid(selectedRobot);\n\n    rowma.getRobotStatus(selectedRobot).then((res: any) => {\n      setRobot(res.data)\n      setRosnodes(res.data.rosnodes)\n      setRosrunCommands(res.data.rosrunCommands);\n      setRoslaunchCommands(res.data.launchCommands);\n      setRostopics(res.data.rostopics);\n      setConnectButtonLoading(false);\n    })\n\n    for (var i = 0; i < sessionStorage.length; i++) {     \n      latlng.push(sessionStorage.getItem(i.toString()));\n    }\n    console.log(latlng);\n\n    let latlng_str = '';\n    for (var i = 0; i < sessionStorage.length; i++) {     \n      //latlng.push(sessionStorage.getItem(i.toString()));\n      if(i!=0){\n        latlng_str += \",\";\n      }\n      latlng_str += sessionStorage.getItem(i.toString());\n    }\n    let msg = '{\"data\": \"'+latlng_str+'\"}';\n    console.log(msg);\n    setTopicMsg(msg);\n  }\n\n  const handleRosrunCommandChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRosrunCommand((event.target as HTMLInputElement).value);\n  };\n\n  const handleRoslaunchCommandChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRoslaunchCommand((event.target as HTMLInputElement).value);\n  };\n\n  const handleRosrunButtonClick = async () => {\n    setRosrunButtonLoading(true);\n    setRosnodeButtonLoading(true);\n    const rosrunArgs = '';\n    await rowma.runRosrun(selectedRobot, selectedRosrunCommand, rosrunArgs);\n    setRosrunButtonLoading(false);\n    await sleep(2500);\n    const _robot = await rowma.getRobotStatus(\"\", selectedRobot)\n    setRosnodes(_robot.data.rosnodes)\n    setRosnodeButtonLoading(false);\n  }\n\n  const handleRoslaunchButtonClick = async () => {\n    setRoslaunchButtonLoading(true);\n    setRosnodeButtonLoading(true);\n    const result = await rowma.runLaunch(selectedRobot, selectedRoslaunchCommand)\n    setRoslaunchButtonLoading(false);\n    rowma.socket.on('roslaunch_log', handleRoslaunchLog)\n    await sleep(2500);\n    const _robot = await rowma.getRobotStatus(\"\", selectedRobot)\n    setRosnodes(_robot.data.rosnodes)\n    setRosnodeButtonLoading(false);\n  }\n\n  const handleRosnodeChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRosnode((event.target as HTMLInputElement).value);\n  }\n\n  const handleRosnodeButtonClick = async () => {\n    setRosnodeButtonLoading(true);\n    rowma.socket.on('rosrun_log', handleRosrunLog)\n    const result = await rowma.killNodes(selectedRobot, [selectedRosnode]);\n    if (result.status === 'success') {\n      const index = rosnodes.indexOf(selectedRosnode)\n      rosnodes.splice(index, 1);\n    }\n    setRosnodeButtonLoading(false);\n  }\n\n  const handleSubscribeButtonClick = async () => {\n    setRostopicButtonLoading(true);\n    await rowma.subscribe(selectedRostopic, handleTopicArrival)\n    await rowma.setTopicRoute(selectedRobot, 'application', rowma.uuid, selectedRostopic);\n    setRostopicButtonLoading(false);\n  }\n\n  const handleRostopicChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRostopic((event.target as HTMLInputElement).value);\n  }\n\n  const Row = ({ index, style }: any) => (\n    <div style={style}>\n      <span className=\"p-4\">{items[index]}</span>\n    </div>\n  );\n\n  const RoslaunchLogRow = ({ index, style }: any) => (\n    <div style={style}>\n      <span className=\"p-4 text-gray-200\">{JSON.parse(roslaunchLogs[index]).log}</span>\n    </div>\n  );\n\n  const RosrunLogRow = ({ index, style }: any) => (\n    <div style={style}>\n      <span className=\"p-4 text-gray-200\">{JSON.parse(rosrunLogs[index]).log}</span>\n    </div>\n  );\n\n  const getItemSize = (index: number) => {\n    return items[index] && items[index].length > 60 ? 70 : 30\n  }\n\n  const getRoslaunchLogItemSize = (index: number) => {\n    return roslaunchLogs[index] && roslaunchLogs[index].length > 60 ? 50 : 20\n  }\n\n  const getRosrunLogItemSize = (index: number) => {\n    return rosrunLogs[index] && rosrunLogs[index].length > 60 ? 50 : 20\n  }\n\n  const ListComponent = () => (\n    <VariableSizeList\n      height={300}\n      width={'95%'}\n      itemCount={items.length}\n      itemSize={getItemSize}\n      className=\"border text-left mt-4 mx-4\"\n      initialScrollOffset={items.length * 70}\n    >\n      {Row}\n    </VariableSizeList>\n  );\n\n  const RoslaunchLogListComponent = () => (\n    <VariableSizeList\n      height={300}\n      width={'95%'}\n      itemCount={roslaunchLogs.length}\n      itemSize={getRoslaunchLogItemSize}\n      className=\"border text-left my-4 mx-4 bg-gray-700\"\n      initialScrollOffset={roslaunchLogs.length * 70}\n    >\n      {RoslaunchLogRow}\n    </VariableSizeList>\n  );\n\n  const RosrunLogListComponent = () => (\n    <VariableSizeList\n      height={300}\n      width={'95%'}\n      itemCount={rosrunLogs.length}\n      itemSize={getRosrunLogItemSize}\n      className=\"border text-left my-4 mx-4 bg-gray-700\"\n      initialScrollOffset={rosrunLogs.length * 70}\n    >\n      {RosrunLogRow}\n    </VariableSizeList>\n  );\n\n  const handleUnsubscribeButtonClick = () => {\n    setRostopicForUnsubscribeButtonLoading(true);\n    rowma.unsubscribeTopic(selectedRobot, selectedRostopicForUnsubscribe)\n    setRostopicForUnsubscribeButtonLoading(false);\n  }\n\n  const handlePublishButtonClick = async () => {\n    setRostopicForPublishButtonLoading(true);\n    await rowma.publish(selectedRobot, selectedRostopicForPublish, JSON.parse(topicMsg))\n    setRostopicForPublishButtonLoading(false);\n  }\n\n  const handleTopicMsgChange = () => {\n    var latlng = [];\n    let latlng_str = '';\n    for (var i = 0; i < sessionStorage.length; i++) {     \n      //latlng.push(sessionStorage.getItem(i.toString()));\n      if(i!=0){\n        latlng_str += \",\";\n      }\n      latlng_str += sessionStorage.getItem(i.toString());\n    }\n    //console.log(\"latlng:\");\n    //console.log(latlng);\n    //console.log(\"latlng_str\");\n    //console.log(latlng_str);\n    let msg = '{\"data\": \"'+latlng_str+'\"}';\n    console.log(msg);\n    setTopicMsg(msg);\n\n  }\n\n  const handlePublishRostopicChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRostopicForPublish((event.target as HTMLInputElement).value);\n  }\n\n  const handleRostopicUnsubscribeChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSelectedRostopicForUnsubscribe((event.target as HTMLInputElement).value)\n  }\n\n  const handleTopicSelectboxChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setSelectedR2rRostopic(event.target.value as string);\n  };\n\n  const handleDestinationSelectboxChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setSelectedDestinationRobot(event.target.value as string);\n  };\n\n  const handleSubscribeR2rButtonClick = () => {\n    var latlng = [];\n    for (var i = 0; i < sessionStorage.length; i++) {     \n      latlng.push(sessionStorage.getItem(i.toString()));\n    }\n    rowma.setTopicRoute(selectedRobot, 'robot', selectedDestinationRobot, selectedR2rRostopic)\n  }\n\n  const handleScriptNameFieldChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setScriptName((event.target as HTMLInputElement).value);\n  }\n\n  const handleEditorChange = (newValue: string) => {\n    setScript(newValue)\n  }\n\n  const handleUploadScriptButtonClick = async () => {\n    setAddScriptButtonLoading(true)\n    await rowma.addScript(selectedRobot, scriptName, script)\n    setAddScriptButtonLoading(false)\n  }\n\n  return (\n    <div className={`${classes.root} App`}>\n      <ThemeProvider theme={theme}>\n        <AppBar position=\"static\" className={classes.header}>\n          <Toolbar>\n            <Container className=\"text-left\">\n              <Typography variant=\"h5\" className=\"inline align-middle\">Robot Navigation on the Map</Typography>\n            </Container>\n          </Toolbar>\n        </AppBar>\n        <Container>\n          <Grid container spacing={3} className=\"py-8\">\n            <Grid item xs={12} sm={12} md={12}>\n              <Paper className={classes.paper}>\n                <div className=\"flex items-center justify-center\">\n                  <TextField color=\"secondary\" margin=\"dense\" label=\"Network URL\" variant=\"outlined\" className={classes.textField} onChange={handleUrlFieldChange} value={rowmaUrl} />\n                  <div className=\"relative mx-4\">\n                    <Button\n                      variant=\"contained\"\n                      color=\"primary\"\n                      disabled={submitUrlButtonLoading}\n                      onClick={handleConnectNetworkClick}\n                    >\n                      ロボット一覧を表示\n                    </Button>\n                    {submitUrlButtonLoading && <CircularProgress size={24} className={classes.buttonProgress} />}\n                  </div>\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={12}>\n              <Paper className={classes.paper}>\n                <div>\n                  <FormControl component=\"fieldset\" className={classes.radioButtons}>\n                    <div className=\"my-4\">\n                      <Typography variant='h5'>走行可能なロボット一覧</Typography>\n                    </div>\n                    {(!robotUuids || (robotUuids && robotUuids.length === 0)) &&\n                      <p>Robot not found...</p>\n                    }\n                    <RadioGroup aria-label=\"robots\" name=\"robots\" value={selectedRobot} onChange={handleRobotChange} className={classes.radioGroup}>\n                    {robotUuids && robotUuids.map(uuid => {\n                      return (\n                        <FormControlLabel value={uuid} control={<Radio />} label={uuid} />\n                      )\n                    })}\n                    </RadioGroup>\n                  </FormControl>\n                </div>\n                <div className=\"relative\">\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={connectButtonLoading || !selectedRobot}\n                    onClick={handleConnectClicked}\n                  >\n                    このロボットを選ぶ\n                  </Button>\n                  {connectButtonLoading && <CircularProgress size={24} className={classes.buttonProgress} />}\n                </div>\n              </Paper>\n            </Grid>\n\n            <Grid item xs={12} sm={12} md={12 }>\n              <Paper className={classes.paper}>\n                <div className=\"my-4\">\n                  <Typography variant='h5'>走行経路の送信</Typography>\n                </div>\n                <RadioGroup aria-label=\"rostopics\" name=\"rostopics\" value={selectedRostopicForPublish} onChange={handlePublishRostopicChange} className={classes.radioGroup}>\n                  <FormControlLabel value={\"/chatter\"} control={<Radio />} label=\"走行経路を指定した後ロボットを選択しました\" />\n                </RadioGroup>\n                <div className=\"relative\">\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    disabled={rostopicForPublishButtonLoading || selectedRostopicForPublish === ''}\n                    onClick={handlePublishButtonClick}\n                  >\n                    経路を送信\n                  </Button>\n                </div>\n              </Paper>\n            </Grid>\n            \n\n          </Grid>\n        </Container>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './tailwind.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}